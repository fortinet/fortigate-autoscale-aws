AWSTemplateFormatVersion: 2010-09-09
Description: >-
    This template creates an S3 bucket in the same region where the stack is
    launched and copy a set of selected objects from original bucket to the new
    bucket. The use of this template is mainly to provide S3 storage for any
    Lambda zip files in the same region as the Lambda function, where the
    same-region policy is required by AWS Lambda. This is a modified and
    enhanced version from a source template origin: qs-1op312ie1.
Parameters:
    S3BucketName:
        AllowedPattern: '^[0-9a-zA-Z]+([0-9a-zA-Z-.]*[0-9a-zA-Z])*$'
        ConstraintDescription: >-
            Quick Start bucket name can include numbers, lowercase letters,
            uppercase letters, and hyphens (-). It cannot start or end with a
            hyphen (-).
        Description: >-
            S3 bucket name for the Quick Start assets. Quick Start bucket name
            can include numbers, lowercase letters, uppercase letters, and
            hyphens (-). It cannot start or end with a hyphen (-).
        Type: String
    S3KeyPrefix:
        AllowedPattern: '^$|^[0-9a-zA-Z-/]*$'
        ConstraintDescription: >-
            Quick Start key prefix can include numbers, lowercase letters,
            uppercase letters, hyphens (-), and forward slash (/).
        Description: >-
            S3 key prefix for the Quick Start assets. Quick Start key prefix can
            include numbers, lowercase letters, uppercase letters, hyphens (-),
            and forward slash (/).
        Type: String
    ObjectPaths:
        AllowedPattern: '^[0-9a-zA-Z-/.,]*$'
        ConstraintDescription: >-
            The paths can include numbers, lowercase letters, uppercase letters,
            hyphens (-), forward slash (/), period (.), and comma (,).
        Description: >-
            A comma-delimited list of paths to each source file to be copied
            from. Each path is resolved as directly following the S3KeyPrefix.
            It can include numbers, lowercase letters, uppercase letters,
            hyphens (-), and forward slash (/).
        Type: String
Conditions:
    IfInUSGovCloud: !Or
        - !Equals
          - !Ref 'AWS::Region'
          - us-gov-east-1
        - !Equals
          - !Ref 'AWS::Region'
          - us-gov-west-1
Resources:
    CopyObjects:
        Properties:
            ServiceToken: !GetAtt
                - CopyObjectsFunction
                - Arn
            DestBucket: !Ref DestinationBucket
            Objects: !Split
                - ','
                - !Ref ObjectPaths
            SourceBucket: !Ref S3BucketName
            Prefix: !Ref S3KeyPrefix
        Type: 'AWS::CloudFormation::CustomResource'
    CopyObjectsFunction:
        Properties:
            Code:
                ZipFile: !Join
                    - |+

                    - - import json
                      - import logging
                      - import threading
                      - import boto3
                      - import cfnresponse
                      - ''
                      - ''
                      - >-
                          def copy_objects(source_bucket, dest_bucket, prefix,
                          objects):
                      - "    s3 = boto3.client('s3')"
                      - '    for o in objects:'
                      - '        key = prefix + o'
                      - '        copy_source = {'
                      - "            'Bucket': source_bucket,"
                      - "            'Key': key"
                      - '        }'
                      - '        s3.copy_object(CopySource=copy_source, Bucket=dest_bucket, Key=key)'
                      - ''
                      - ''
                      - 'def delete_objects(bucket):'
                      - "    client = boto3.client('s3')"
                      - '    print("Collecting data from" + bucket)'
                      - "    paginator = client.get_paginator('list_object_versions')"
                      - '    result = paginator.paginate(Bucket=bucket)'
                      - '    objects = []'
                      - '    for page in result:'
                      - '        try:'
                      - "            for k in page['Versions']:"
                      - "                objects.append({'Key':k['Key'],'VersionId': k['VersionId']})"
                      - '            try:'
                      - "                for k in page['DeleteMarkers']:"
                      - "                    version = k['VersionId']"
                      - "                    key = k['Key']"
                      - "                    objects.append({'Key': key,'VersionId': version})"
                      - '            except:'
                      - '                pass'
                      - '            print("deleting objects")'
                      - "            client.delete_objects(Bucket=bucket,     Delete={'Objects': objects})"
                      - '           # objects = []'
                      - '        except:'
                      - '            pass'
                      - '    print("bucket already empty")'
                      - ''
                      - ''
                      - ''
                      - 'def timeout(event, context):'
                      - "    logging.error('Execution is about to time out, sending failure response to CloudFormation')"
                      - '    cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)'
                      - ''
                      - ''
                      - 'def handler(event, context):'
                      - '    # make sure we send a failure to CloudFormation if the function is going to timeout'
                      - '    timer = threading.Timer((context.get_remaining_time_in_millis() / 1000.00) - 0.5, timeout, args=[event, context])'
                      - '    timer.start()'
                      - ''
                      - "    print('Received event: %s' % json.dumps(event))"
                      - '    status = cfnresponse.SUCCESS'
                      - '    try:'
                      - "        source_bucket = event['ResourceProperties']['SourceBucket']"
                      - "        dest_bucket = event['ResourceProperties']['DestBucket']"
                      - "        prefix = event['ResourceProperties']['Prefix']"
                      - "        objects = event['ResourceProperties']['Objects']"
                      - "        if event['RequestType'] == 'Delete':"
                      - '            delete_objects(dest_bucket)'
                      - '        else:'
                      - '            copy_objects(source_bucket, dest_bucket, prefix, objects)'
                      - '    except Exception as e:'
                      - "        logging.error('Exception: %s' % e, exc_info=True)"
                      - '        status = cfnresponse.FAILED'
                      - '    finally:'
                      - '        timer.cancel()'
                      - '        cfnresponse.send(event, context, status, {}, None)'
                      - ''
            Description: >-
                Copies objects from a source S3 bucket to a destination S3
                bucket
            Handler: index.handler
            Role: !GetAtt
                - CopyObjectsRole
                - Arn
            Runtime: python3.9
            Timeout: 240
        Type: 'AWS::Lambda::Function'
    CopyObjectsRole:
        Properties:
            AssumeRolePolicyDocument:
                Statement:
                    - Action: 'sts:AssumeRole'
                      Effect: Allow
                      Principal:
                          Service: lambda.amazonaws.com
                Version: 2012-10-17
            ManagedPolicyArns:
                - !Sub
                  - >-
                      arn:aws${GovCloudSuffix}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                  - GovCloudSuffix: !If
                        - IfInUSGovCloud
                        - '-us-gov'
                        - ''
            Path: /
            Policies:
                - PolicyDocument:
                      Statement:
                          - Action:
                                - 's3:GetObject'
                            Effect: Allow
                            Resource:
                                - !Sub
                                  - >-
                                      arn:aws${GovCloudSuffix}:s3:::${S3BucketName}/${S3KeyPrefix}*
                                  - GovCloudSuffix: !If
                                        - IfInUSGovCloud
                                        - '-us-gov'
                                        - ''
                                    S3BucketName: !Ref S3BucketName
                                    S3KeyPrefix: !Ref S3KeyPrefix
                          - Action:
                                - 's3:ListBucket'
                                - 's3:ListBucketVersions'
                                - 's3:GetBucketVersioning'
                            Effect: Allow
                            Resource:
                                - !Sub
                                  - >-
                                      arn:aws${GovCloudSuffix}:s3:::${S3BucketName}
                                  - GovCloudSuffix: !If
                                        - IfInUSGovCloud
                                        - '-us-gov'
                                        - ''
                                    S3BucketName: !Ref S3BucketName
                                - !GetAtt
                                  - DestinationBucket
                                  - Arn
                          - Action:
                                - 's3:PutObject'
                                - 's3:DeleteObject'
                                - 's3:GetObject'
                                - 's3:DeleteObjectVersion'
                                - 's3:GetObjectVersion'
                            Effect: Allow
                            Resource:
                                - !Sub
                                  - >-
                                      arn:aws${GovCloudSuffix}:s3:::${S3BucketName}/${S3KeyPrefix}*
                                  - GovCloudSuffix: !If
                                        - IfInUSGovCloud
                                        - '-us-gov'
                                        - ''
                                    S3BucketName: !Ref S3BucketName
                                    S3KeyPrefix: !Ref S3KeyPrefix
                                - !Join
                                  - /
                                  - - !GetAtt
                                      - DestinationBucket
                                      - Arn
                                    - '*'
                      Version: 2012-10-17
                  PolicyName: object-copier
        Type: 'AWS::IAM::Role'
    DestinationBucket:
        Properties:
            Tags: []
            VersioningConfiguration:
                Status: Enabled
        Type: 'AWS::S3::Bucket'
    CleanUpS3Bucket:
        Properties:
            DestBucket: !Ref DestinationBucket
            ServiceToken: !GetAtt
                - CleanUpS3BucketFunction
                - Arn
        Type: 'AWS::CloudFormation::CustomResource'
    CleanUpS3BucketFunction:
        Properties:
            Code:
                ZipFile: !Join
                    - |+

                    - - import json
                      - import logging
                      - import threading
                      - import boto3
                      - import cfnresponse
                      - client = boto3.client('s3')
                      - ''
                      - ''
                      - 'def delete_NonVersionedobjects(bucket):'
                      - '    print("Collecting data from" + bucket)'
                      - "    paginator =     client.get_paginator('list_objects_v2')"
                      - '    result = paginator.paginate(Bucket=bucket)'
                      - '    objects = []'
                      - '    for page in result:'
                      - '        try:'
                      - "            for k in page['Contents']:"
                      - "                objects.append({'Key': k['Key']})"
                      - '                print("deleting objects")'
                      - "                client.delete_objects(Bucket=bucket, Delete={'Objects': objects})"
                      - '                objects = []'
                      - '        except:'
                      - '            pass'
                      - '            print("bucket is already empty")'
                      - ''
                      - 'def delete_versionedobjects(bucket):'
                      - '    print("Collecting data from" + bucket)'
                      - "    paginator = client.get_paginator('list_object_versions')"
                      - '    result = paginator.paginate(Bucket=bucket)'
                      - '    objects = []'
                      - '    for page in result:'
                      - '        try:'
                      - "            for k in page['Versions']:"
                      - "                objects.append({'Key':k['Key'],'VersionId': k['VersionId']})"
                      - '            try:'
                      - "                for k in page['DeleteMarkers']:"
                      - "                    version = k['VersionId']"
                      - "                    key = k['Key']"
                      - "                    objects.append({'Key': key,'VersionId': version})"
                      - '            except:'
                      - '                pass'
                      - '            print("deleting objects")'
                      - "            client.delete_objects(Bucket=bucket, Delete={'Objects': objects})"
                      - '           # objects = []'
                      - '        except:'
                      - '            pass'
                      - '    print("bucket already empty")'
                      - ''
                      - ''
                      - ''
                      - 'def timeout(event, context):'
                      - "    logging.error('Execution is about to time out, sending failure response to CloudFormation')"
                      - '    cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)'
                      - ''
                      - ''
                      - 'def handler(event, context):'
                      - '    # make sure we send a failure to CloudFormation if the function is going to timeout'
                      - '    timer = threading.Timer((context.get_remaining_time_in_millis() / 1000.00) - 0.5, timeout, args=[event, context])'
                      - '    timer.start()'
                      - ''
                      - "    print('Received event: %s' % json.dumps(event))"
                      - '    status = cfnresponse.SUCCESS'
                      - '    try:'
                      - "        dest_bucket = event['ResourceProperties']['DestBucket']"
                      - "        if event['RequestType'] == 'Delete':"
                      - '            CheckifVersioned = client.get_bucket_versioning(Bucket=dest_bucket)'
                      - '            print("CheckifVersioned")'
                      - "            if 'Status' in CheckifVersioned:"
                      - "                print(CheckifVersioned['Status'])"
                      - '                print("This is a versioned Bucket")'
                      - '                delete_versionedobjects(dest_bucket)'
                      - '            else:'
                      - '                print("This is not a versioned bucket")'
                      - '                delete_NonVersionedobjects(dest_bucket)'
                      - '        else:'
                      - '            print("Nothing to do")'
                      - '    except Exception as e:'
                      - "        logging.error('Exception: %s' % e, exc_info=True)"
                      - '        status = cfnresponse.FAILED'
                      - '    finally:'
                      - '        timer.cancel()'
                      - '        cfnresponse.send(event, context, status, {}, None)'
                      - ''
            Description: Empty the S3 Bucket
            Handler: index.handler
            Role: !GetAtt
                - S3CleanUpRole
                - Arn
            Runtime: python3.9
            Timeout: 240
        Type: 'AWS::Lambda::Function'
    S3CleanUpRole:
        Properties:
            AssumeRolePolicyDocument:
                Statement:
                    - Action: 'sts:AssumeRole'
                      Effect: Allow
                      Principal:
                          Service: lambda.amazonaws.com
                Version: 2012-10-17
            ManagedPolicyArns:
                - !Sub
                  - >-
                      arn:aws${GovCloudSuffix}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                  - GovCloudSuffix: !If
                        - IfInUSGovCloud
                        - '-us-gov'
                        - ''
            Path: /
            Policies:
                - PolicyDocument:
                      Statement:
                          - Action:
                                - 's3:ListBucket'
                                - 's3:ListBucketVersions'
                                - 's3:GetBucketVersioning'
                            Effect: Allow
                            Resource: !GetAtt
                                - DestinationBucket
                                - Arn
                          - Action:
                                - 's3:PutObject'
                                - 's3:DeleteObject'
                                - 's3:GetObject'
                                - 's3:DeleteObjectVersion'
                                - 's3:GetObjectVersion'
                            Effect: Allow
                            Resource:
                                - !Join
                                  - /
                                  - - !GetAtt
                                      - DestinationBucket
                                      - Arn
                                    - '*'
                      Version: 2012-10-17
                  PolicyName: bucket-dumper
        Type: 'AWS::IAM::Role'
Outputs:
    DestinationBucket:
        Description: S3 Bucket for the copied objects
        Value: !Ref DestinationBucket
    ObjectPaths:
        Description: Copied object paths
        Value: !Ref ObjectPaths
    KeyPrefix:
        Description: The key prefix between bucket root and copied object paths
        Value: !Ref S3KeyPrefix
